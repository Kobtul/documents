define(`ACT', `
  {
    // broadcast my initial position
    when query beliefs [{ !myPositionSent }] then {
      when query beliefs (pos) [{ pos = initPos; return true; }] 
      then {
        update body (pos) [{
          msg = pos.getLeft() + "," + pos.getRight();
          PRINT(`"broadcast "+msg');
          self.broadcastMessage(new massim.agent.framework.StringContent(msg, self.getSimStep()));
        }],
        update beliefs [{ myPositionSent = true; }]
      }
    },
    
    when query beliefs (msg) [{ msg = sendMsg; msg = (msg==null)?"":msg; return (sendMsg != null); }]
    then { 
      update body (msg) [{
        self.broadcastMessage(new massim.agent.framework.StringContent(msg, self.getSimStep()));
      }], 
      update beliefs (msg) [{ lastMsg = msg; sendMsg = null; }]
    },
    
    // we have a goal 
    when query goals [{ !goals.isEmpty() }] then {

      // retrieve coordination to go
      when query goals (posG, rule) [{ g = goals.getFirst(); posG = g.getLeft(); rule = g.getRight(); return true; }] 
      then {      
        // determine action to do
        when query beliefs (posG, posC) [{ posC = currPos; return true; }]
        then {
          when query body (posG, posC, dirX, dirY, ACTIONS) [{
            int dirY = Integer.signum(posG.getRight()-posC.getRight());
            int dirX = Integer.signum(posG.getLeft()-posC.getLeft());
            String[] ACTIONS = new String[] {"north", "", "south", "west", "", "east"};
            return !((dirX == 0) && (dirY == 0));
          }]
          then {
            when query beliefs (dirX, dirY, isAllowed) [{
              String[] allowed = {"CorralAlly", "CorralEnemy", "FenceOpen", "Empty" };
              String[] cell = {view.get(new Pair(dirX, 0)), view.get(new Pair(0, dirY)), view.get(new Pair(dirX, dirY)) };
              boolean[] isAllowed = { false, false, false };
              for (int i = 0; i < cell.length; i++) {
                for (int j = 0; j < allowed.length; j++) {
                  isAllowed[i] = isAllowed[i] || allowed[j].equals(cell[i]);
                }
              }
              return true;
            }] then {
              when query beliefs (isAllowed) [{ (isAllowed[0] != isAllowed[1]) }] then {
                update body (dirX, dirY, isAllowed, ACTIONS) [{
                  self.act(((isAllowed[1])?ACTIONS[dirY+1]:"") + ((isAllowed[0])?ACTIONS[dirX+4]:""));
                }]
              },
              when query beliefs (isAllowed) [{!isAllowed[2] && isAllowed[0] && isAllowed[1] }] then {
                update body (dirX, ACTIONS) [{ self.act(ACTIONS[dirX+4]); }] ;
                update body (dirY, ACTIONS) [{ self.act(ACTIONS[dirY+1]); }] 
              },
              when query beliefs [{isAllowed[2] && isAllowed[0] && isAllowed[1]}] then {
                update body (dirX, ACTIONS) [{ self.act(ACTIONS[dirX+4]); }] ;
                update body (dirY, ACTIONS) [{ self.act(ACTIONS[dirY+1]); }] ;
                update body (dirX, dirY, ACTIONS) [{ self.act(ACTIONS[dirY+1] + ACTIONS[dirX+4]); }] 
              },
              when query beliefs (isAllowed) [{ !isAllowed[0] && !isAllowed[1] }]
              then {
                when query body (dirX) [{ dirX == 0 }] then {
                  update body (ACTIONS) [{ self.act(ACTIONS[3]); }] ;
                  update body (ACTIONS) [{ self.act(ACTIONS[5]); }]
                } else {
                  update body (dirX, ACTIONS) [{ self.act(ACTIONS[4-dirX]); }]
                } ;
                when query body (dirY) [{ dirY == 0 }] then {
                  update body (ACTIONS) [{ self.act(ACTIONS[0]); }] ;
                  update body (ACTIONS) [{ self.act(ACTIONS[2]); }]
                } else {
                  update body (dirY, ACTIONS) [{ self.act(ACTIONS[1-dirY]); }]
                } ;
                when query body (dirX, dirY) [{ ! (dirY == 0 && dirX == 0) }] then {
                  update body (dirX, dirY, ACTIONS) [{ self.act(ACTIONS[-dirY+1] + ACTIONS[-dirX+4]); }] ;
                  update body (dirX, dirY, ACTIONS) [{ self.act(ACTIONS[-dirY+1] + ACTIONS[dirX+4]); }] ;
                  update body (dirX, dirY, ACTIONS) [{ self.act(ACTIONS[dirY+1] + ACTIONS[-dirX+4]); }]
                }
              }              
            }
          }
        }
      }
    }
  }
')

