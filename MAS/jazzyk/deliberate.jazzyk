define(`DELIBERATE', `
  {
    // if we moved after last goal reached, fix it
    when query beliefs [{ lastGoal != null }]
    then {      
      when query beliefs [{ !currPos.equals(lastGoal) }]
      then {
        when query beliefs (goal) [{ goal = lastGoal; }]
        then {
          update goals (goal) [{
            PRINT(`"adding again a goal: ["+goal.getLeft()+","+goal.getRight()+"]"');
            goals.add(new Pair(goal,""));
          }],
          update beliefs [{ lastGoal = null; lastGoalAcurate = 0; }]
        }
      }
    },
    
    // add initial position as last goal
    when query beliefs [{ !initPosAsLastGoal }] 
    then {
      when query beliefs (pos) [{ pos = initPos; return true; }] 
      then {
        update goals (pos) [{
          goals.add(new Pair(pos, "")); 
          PRINT(`"added initial position as a goal: ["+pos.getLeft()+","+pos.getRight()+"]"');
        }],
        update beliefs [{ initPosAsLastGoal = true; }]
      }
    },
    
    // we have a goal
    when query goals [{ !goals.isEmpty() }] then {
      
      // retrieve coordination to go
      when query goals (Xg, Yg, rule) [{
        p = goals.getFirst();
        Xg = p.getLeft().getLeft();
        Yg = p.getLeft().getRight();
        rule = p.getRight();
        return true;
      }] then {
        // get my position from beliefs
        when query beliefs (Xc, Yc) [{ Xc = currPos.getLeft(); Yc = currPos.getRight(); return true; }]
        then {
          // are we moving forward?
          when query beliefs (rule) [{ rule.isEmpty() }]
          then when query beliefs (Xg, Yg, Xc, Yc, dirX, dirY) [{
            dirX = Integer.signum(Xg-Xc); 
            dirY = Integer.signum(Yg-Yc);
            return (dirX != 0) || (dirY != 0);
          }]
          // is fence in front of? get coordinates of switch
          then when query beliefs (dirX, dirY, Xc, Yc, Xn, Yn) [{
            if ("FenceClosed".equals(view.get(new Pair(dirX,0)))) {
              for (int i = -7; i <= 7; i++) {
                if ("Switch".equals(view.get(new Pair(dirX,i)))) {
                  Xn = Xc; Yn = Yc+i; return true;
                }
              }
            }
            if ("FenceClosed".equals(view.get(new Pair(0,dirY)))) {
              for (int i = -7; i <= 7; i++) {
                if ("Switch".equals(view.get(new Pair(i,dirY)))) {
                  Xn = Xc+i; Yn = Yc; return true;
                }
              }
            }
            Xn = -1; Yn = -1; return false;
          }] 
          // add new goal, we are not moving forward..
          then update goals (Xn, Yn) [{
            goals.push(new Pair(new Pair(Xn, Yn), "release"));
            PRINT(`"new temporary goal: ["+Xn+","+Yn+"]"');
          }],
          // goal coordinates reached
          when query beliefs (Xc, Yc, Xg, Yg) [{
            Yg.equals(Yc) && Xg.equals(Xc)
          }] then {
            // rule?
            when query beliefs (rule) [{ rule.isEmpty() }]
            // if not, remove the goal
            then {
              when query goals [{ goals.size() == 1 }]
              then update beliefs (Xg, Yg) [{
                PRINT(`"last goal!!"');
                lastGoal = new Pair(Xg, Yg);
              }],
              update goals (Xg, Yg) [{
                PRINT(`"fulfilled goal goto ["+Xg+", "+Yg+"]"');
                goals.removeFirst();
              }],
              when query beliefs [{ escaping }]
              then update beliefs [{
                sendMsg = MYNAME;
                escaping = false;
                PRINT(`"stop escaping."');
              }]
            }
            else {
              // if so, is rule fullfiled? 
              when query beliefs (rule) [{ rule.equals(recvMsg) }] then {
                update beliefs [{ recvMsg = null; }],
                update goals (Xg, Yg) [{
                  PRINT(`"fulfilled goal goto ["+Xg+", "+Yg+"]"');
                  goals.removeFirst();
                }] 
              },
              // we send instructions to other agents
              when query beliefs (Xc, Yc, msg) [{
                int[] x = new int[] {-1, 1, 0, 0};
                int[] y = new int[] {0, 0, -1, 1};
                for (int i = 0; i < 4; i++) {
                  Pair cell0 = new Pair(x[i],y[i]); Pair cell1 = new Pair(2*x[i],2*y[i]);
                  if ("Switch".equals(view.get(cell0)) && !"Obstacle".equals(view.get(cell1))) {
                    msg = "go("+(Xc+x[i]*2)+","+(Yc+y[i]*2)+","+MYNAME+")";
                    return true;
                  }
                }
                msg = ""; return false;
              }]
              //but only when same message was not sended
              then when query beliefs (msg) [{ lastMsg == null || !lastMsg.equals(msg) }]
              then update beliefs (msg) [{ sendMsg = msg; }]
            }
          }
        }
      }
    },
    
    // handle received message - it may lead in new goal
    when query beliefs [{ ( recvMsg != null ) && !recvMsg.isEmpty() }]
    then {
      // check regex, split tokens, and parse values
      when query beliefs [{ recvMsg.matches("go[(][0-9]+,[0-9]+,.+[)]") }]
      then when query beliefs (p) [{
        p = recvMsg.substring(3, recvMsg.length()-1).split(",");
        return ! p[2].equals( MYNAME );
      }] 
      then when query beliefs (p, X, Y, rule) [{
        X = Integer.parseInt( p[0] );
        Y = Integer.parseInt( p[1] );
        rule = p[2];
        return true;
      }]
      then {
        // same goal already (not) exist?
        when query goals (X, Y) [{
          p = goals.getFirst().getLeft(); 
          r = goals.getFirst().getRight();
          return (p.getLeft().equals(X) && p.getRight().equals(Y) && !r.isEmpty());
        }]
        // remove the goal, if so and start escaping
        then {
          update goals [{
            goals.removeFirst();
            PRINT(`"removed temporary goal: ["+X+","+Y+"]"');
          }],
          update beliefs [{
            escaping = true;
            PRINT(`"start escaping."');
          }],
          when query beliefs (Xe,Ye) [{
            int[] x = new int[] {0, 0, -1, 1};
            int[] y = new int[] {-1, 1, 0, 0};
            Xe = currPos.getLeft();
            Ye = currPos.getRight();
            for (int i = 0; i <= 3; i++) {
              if ("Switch".equals(view.get(new Pair(x[i],y[i])))) {
                if (x[i] == 0) {
                  if ("Obstacle".equals(view.get(new Pair(x[i]+1, y[i])))) {
                    Xe += x[i]-1;
                  }
                  if ("Obstacle".equals(view.get(new Pair(x[i]-1, y[i])))) {
                    Xe += x[i]+1;
                  }
                  Ye += 2*y[i];
                  return true;
                }
                if (y[i] == 0) {
                  if ("Obstacle".equals(view.get(new Pair(x[i], y[i]+1)))) {
                    Ye += y[i]-1;
                  }
                  if ("Obstacle".equals(view.get(new Pair(x[i], y[i]-1)))) {
                    Ye += y[i]+1;
                  }
                  Xe += 2*x[i];
                  return true;
                }
              }
            }
            return false;
          }]
          then update goals (Xe,Ye) [{
            goals.push(new Pair(new Pair(Xe, Ye), "")); 
            PRINT(`"added new escape goal: ["+Xe+","+Ye+"]"');
          }]
        }
        // otherwise push new
        else {
          when query goals [{ return !goals.getFirst().getRight().isEmpty(); }]
          then update goals [{
            x = goals.getFirst().getLeft().getLeft();
            y = goals.getFirst().getLeft().getRight();
            goals.removeFirst();
            PRINT(`"removed temporary goal: ["+x+","+y+"]"');
          }],
          update goals (X, Y, rule) [{
            goals.push(new Pair( new Pair( X, Y ), rule));
            PRINT(`"new temporary goal: ["+X+","+Y+"]"');
          }]
        },
        // clean up message if processed
        update beliefs [{ recvMsg = null; }]
      }
    }
  }
')

